<div class="max-w-xl mx-auto mt-10">
  <div class="bg-white shadow-md rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-6 text-gray-800">Загрузить модель</h2>
    <%= form_with(model: [@user, @model], local: true, html: { multipart: true }) do |f| %>
      <div class="mb-4">
        <%= f.label :name, "Название модели", class: "block text-gray-700 font-medium mb-2" %>
        <%= f.text_field :name, class: "w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-400" %>
      </div>

      <div class="mb-4">
        <%= f.label :description, "Описание модели", class: "block text-gray-700 font-medium mb-2" %>
        <%= f.text_area :description, rows: 4, class: "w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-400" %>
      </div>

      <div class="mb-4" data-controller="upload">
        <%= f.label :file, "Файл модели", class: "block text-gray-700 font-medium mb-2" %>
      
        <div 
          class="flex items-center justify-center w-full border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition"
          data-upload-target="dropzone"
          data-action="dragover->upload#handleDragOver dragleave->upload#handleDragLeave drop->upload#handleDrop click->upload#browse">
          <div class="text-gray-500">
            <svg class="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4a1 1 0 011-1h8a1 1 0 011 1v12m-9 4h10a1 1 0 001-1v-4a1 1 0 00-1-1h-2.586a1 1 0 01-.707-.293l-1.414-1.414a1 1 0 00-.707-.293H10a1 1 0 00-1 1v6z" />
            </svg>
            <p class="mt-2 text-sm">Перетащите файл сюда или <span class="underline text-blue-600">нажмите для выбора</span></p>
            <p class="mt-1 text-xs text-gray-400" data-upload-target="filename">Файл не выбран</p>
          </div>
        </div>
      
        <%= f.file_field :file, class: "hidden", data: { upload_target: "input" } %>
      </div>
      
      <% if @model.errors.any? %>
        <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <h3 class="font-bold mb-2">Ошибки:</h3>
          <ul class="list-disc list-inside">
            <% @model.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div class="text-right">
        <%= f.submit "Загрузить модель", class: "bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded" %>
      </div>
    <% end %>
  </div>
</div>

<!-- Конвертер glTF -> GLB -->
<div class="max-w-xl mx-auto mt-10">
  <div class="bg-white shadow-md rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-6 text-gray-800">GLTF to GLB Converter</h2>
    <div class="mb-4">
      <!-- Стилизованная зона drag & drop -->
      <div 
        id="gltf-drop-zone"
        class="flex items-center justify-center w-full border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition">
        <div class="text-gray-500">
          <svg class="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4a1 1 0 011-1h8a1 1 0 011 1v12m-9 4h10a1 1 0 001-1v-4a1 1 0 00-1-1h-2.586a1 1 0 01-.707-.293l-1.414-1.414a1 1 0 00-.707-.293H10a1 1 0 00-1 1v6z" />
          </svg>
          <p class="mt-2 text-sm">Перетащите сюда все файлы и папки для вашего glTF ассета</p>
        </div>
      </div>
    </div>
    <div id="gltf-download" class="mb-4">
      <button id="gltf-download-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded" disabled>Конвертировать файлы</button>
      <a id="gltf-download-link" class="hidden"></a>
    </div>
  </div>
</div>

<!-- Скрипт конвертера glTF -> GLB -->
<script>
  // Глобальные переменные для конвертера
  var files = [];
  var fileblobs = [];
  var gltf;
  var remainingfilestoprocess = 0;
  var glbfilename;

  var outputBuffers;
  var bufferMap;
  var bufferOffset;

  // Обработчик dragover для зоны конвертера
  function handleGltfDragOver(event) {
    event.stopPropagation();
    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
  }

  var dropZone = document.getElementById('gltf-drop-zone');
  dropZone.addEventListener('dragover', handleGltfDragOver, false);
  dropZone.addEventListener('drop', handleGltfFileSelect, false);
  dropZone.addEventListener('click', function() {
    // Для удобства можно добавить стандартный input[type=file] (не показан здесь)
  });

  function addDownloadButton() {
    var btn = document.getElementById("gltf-download-btn");
    btn.disabled = true;
    btn.textContent = "Processing...";
    btn.onclick = startDownload;
  }

  function startDownload() {
    document.getElementById("gltf-download-link").click();
  }

  function handleGltfFileSelect(event) {
    event.stopPropagation();
    event.preventDefault();
    addDownloadButton();
    var items = event.dataTransfer.items;
    remainingfilestoprocess = items.length;
    for (var i = 0; i < items.length; i++) {
      var entry;
      if (items[i].getAsEntry) {
        entry = items[i].getAsEntry();
      } else if (items[i].webkitGetAsEntry) {
        entry = items[i].webkitGetAsEntry();
      }
      if (entry) {
        traverseFileTree(entry);
      }
    }
  }

  function traverseFileTree(item, path) {
    path = path || "";
    if (item.isFile) {
      item.file(function(file) {
        files.push(file);
        var extension = file.name.split('.').pop().toLowerCase();
        if (extension === "gltf") {
          glbfilename = file.name.substring(0, file.name.lastIndexOf('.'));
          var reader = new FileReader();
          reader.readAsText(file);
          reader.onload = function(event) {
            gltf = JSON.parse(event.target.result);
            checkRemaining();
          };
        } else {
          var reader = new FileReader();
          reader.onload = (function(theFile) {
            return function(e) {
              fileblobs[theFile.name.toLowerCase()] = (e.target.result);
              checkRemaining();
            };
          })(file);
          reader.readAsArrayBuffer(file);
        }
      }, function(error) {
        console.log(error);
      });
    } else if (item.isDirectory) {
      var dirReader = item.createReader();
      dirReader.readEntries(function(entries) {
        remainingfilestoprocess += entries.length;
        checkRemaining();
        for (var i = 0; i < entries.length; i++) {
          traverseFileTree(entries[i], path + item.name + "/");
        }
      });
    }
  }

  function checkRemaining() {
    remainingfilestoprocess--;
    if (remainingfilestoprocess === 0) {
      outputBuffers = [];
      bufferMap = new Map();
      bufferOffset = 0;
      processBuffers().then(fileSave);
    }
  }

  function processBuffers() {
    var pendingBuffers = gltf.buffers.map(function(buffer, bufferIndex) {
      return dataFromUri(buffer).then(function(data) {
        if (data !== undefined) {
          outputBuffers.push(data);
        }
        delete buffer.uri;
        buffer.byteLength = data.byteLength;
        bufferMap.set(bufferIndex, bufferOffset);
        bufferOffset += alignedLength(data.byteLength);
      });
    });

    return Promise.all(pendingBuffers).then(function() {
      var bufferIndex = gltf.buffers.length;
      var images = gltf.images || [];
      var pendingImages = images.map(function(image) {
        return dataFromUri(image).then(function(data) {
          if (data === undefined) {
            delete image['uri'];
            return;
          }
          var bufferView = {
            buffer: 0,
            byteOffset: bufferOffset,
            byteLength: data.byteLength,
          };
          bufferMap.set(bufferIndex, bufferOffset);
          bufferIndex++;
          bufferOffset += alignedLength(data.byteLength);
          var bufferViewIndex = gltf.bufferViews.length;
          gltf.bufferViews.push(bufferView);
          outputBuffers.push(data);
          image['bufferView'] = bufferViewIndex;
          image['mimeType'] = getMimeType(image.uri);
          delete image['uri'];
        });
      });
      return Promise.all(pendingImages);
    });
  }

  function fileSave() {
    var Binary = {
      Magic: 0x46546C67
    };
  
    for (var i = 0, len = gltf.bufferViews.length; i < len; i++) {
      var bufferView = gltf.bufferViews[i];
      if (bufferView.byteOffset === undefined) {
        bufferView.byteOffset = 0;
      } else {
        bufferView.byteOffset = bufferView.byteOffset + bufferMap.get(bufferView.buffer);
      }
      bufferView.buffer = 0;
    }
    var binBufferSize = bufferOffset;
    gltf.buffers = [{
      byteLength: binBufferSize
    }];
  
    var enc = new TextEncoder();
    var jsonBuffer = enc.encode(JSON.stringify(gltf));
    var jsonAlignedLength = alignedLength(jsonBuffer.length);
    var padding;
    if (jsonAlignedLength !== jsonBuffer.length) {
      padding = jsonAlignedLength - jsonBuffer.length;
    }
    var totalSize = 12 + // file header: magic + version + length
      8 + // json chunk header: json length + type
      jsonAlignedLength +
      8 + // bin chunk header: chunk length + type
      binBufferSize;
    var finalBuffer = new ArrayBuffer(totalSize);
    var dataView = new DataView(finalBuffer);
    var bufIndex = 0;
    dataView.setUint32(bufIndex, Binary.Magic, true);
    bufIndex += 4;
    dataView.setUint32(bufIndex, 2, true);
    bufIndex += 4;
    dataView.setUint32(bufIndex, totalSize, true);
    bufIndex += 4;
    // JSON
    dataView.setUint32(bufIndex, jsonAlignedLength, true);
    bufIndex += 4;
    dataView.setUint32(bufIndex, 0x4E4F534A, true);
    bufIndex += 4;
  
    for (var j = 0; j < jsonBuffer.length; j++) {
      dataView.setUint8(bufIndex, jsonBuffer[j]);
      bufIndex++;
    }
    if (padding !== undefined) {
      for (var j = 0; j < padding; j++) {
        dataView.setUint8(bufIndex, 0x20);
        bufIndex++;
      }
    }
  
    // BIN
    dataView.setUint32(bufIndex, binBufferSize, true);
    bufIndex += 4;
    dataView.setUint32(bufIndex, 0x004E4942, true);
    bufIndex += 4;
    for (var i = 0; i < outputBuffers.length; i++) {
      var bufoffset = bufIndex + bufferMap.get(i);
      var buf = new Uint8Array(outputBuffers[i]);
      var thisbufindex = bufoffset;
      for (var j = 0; j < buf.byteLength; j++) {
        dataView.setUint8(thisbufindex, buf[j]);
        thisbufindex++;
      }
    }
  
    // Создаём Blob и File
    var fileBlob = new Blob([finalBuffer], { type: 'model/json-binary' });
    var glbFile = new File([fileBlob], glbfilename + ".glb", { type: 'model/json-binary' });
  
    // Ссылка для скачивания
    var a = document.getElementById("gltf-download-link");
    a.href = URL.createObjectURL(fileBlob);
    a.download = glbFile.name;
    var btn = document.getElementById("gltf-download-btn");
    btn.disabled = false;
    btn.textContent = "Download .glb";
    a.click();
  
    // Передаём .glb файл в форму загрузки:
    var dataTransfer = new DataTransfer();
    dataTransfer.items.add(glbFile);
    // Обратите внимание на корректный селектор с data-upload-target
    var fileInput = document.querySelector('input[type="file"][data-upload-target="input"]');
    if (fileInput) {
      fileInput.files = dataTransfer.files;
    }
    // Обновляем отображение имени файла
    var filenameDisplay = document.querySelector('[data-upload-target="filename"]');
    if (filenameDisplay) {
      filenameDisplay.textContent = glbFile.name;
    }
  }

  function isBase64(uri) {
    return uri.length < 5 ? false : uri.substr(0, 5) === "data:";
  }
  function decodeBase64(uri) {
    return fetch(uri).then(function(response) { return response.arrayBuffer(); });
  }
  function dataFromUri(buffer) {
    if (buffer.uri === undefined) {
      return Promise.resolve(undefined);
    } else if (isBase64(buffer.uri)) {
      return decodeBase64(buffer.uri);
    } else {
      var filename = buffer.uri.substr(buffer.uri.lastIndexOf('/') + 1);
      return Promise.resolve(fileblobs[filename.toLowerCase()]);
    }
  }
  function alignedLength(value) {
    var alignValue = 4;
    if (value == 0) {
      return value;
    }
    var multiple = value % alignValue;
    if (multiple === 0) {
      return value;
    }
    return value + (alignValue - multiple);
  }

  function getMimeType(filename) {
    for (var mimeType in gltfMimeTypes) {
      for (var extensionIndex in gltfMimeTypes[mimeType]) {
        var extension = gltfMimeTypes[mimeType][extensionIndex];
        if (filename.toLowerCase().endsWith('.' + extension)) {
          return mimeType;
        }
      }
    }
    return 'application/octet-stream';
  }

  var gltfMimeTypes = {
    'image/png': ['png'],
    'image/jpeg': ['jpg', 'jpeg'],
    'text/plain': ['glsl', 'vert', 'vs', 'frag', 'fs', 'txt'],
    'image/vnd-ms.dds': ['dds']
  };
</script>