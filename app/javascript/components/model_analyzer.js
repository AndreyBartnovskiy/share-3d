export class ModelAnalyzer {
  constructor() {
    this.isInitialized = false;
    this.currentEngine = null;
    this.analysisVisible = false;
    this.advancedAnalysisVisible = false;
    this.showAllMeshes = false;
    this.initializeElements();
    this.bindEvents();
  }

  initializeElements() {
    this.basicAnalysisButton = document.getElementById('runBasicAnalysis');
    this.advancedAnalysisButton = document.getElementById('runAdvancedAnalysis');
    this.analysisResultsElem = document.getElementById('analysisResults');
    this.advancedAnalysisResultsElem = document.getElementById('advancedAnalysisResults');
  }

  bindEvents() {
    this.basicAnalysisButton?.addEventListener('click', () => this.toggleBasicAnalysis());
    this.advancedAnalysisButton?.addEventListener('click', () => this.toggleAdvancedAnalysis());
    document.addEventListener('turbo:before-cache', () => this.cleanup());
  }

  cleanup() {
    if (this.currentEngine) {
      this.currentEngine.dispose();
      this.currentEngine = null;
    }
    const canvas = document.getElementById("tempCanvas");
    if (canvas) canvas.remove();
  }

  toggleBasicAnalysis() {
    if (this.analysisVisible) {
      // –°–∫—Ä—ã—Ç—å –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      this.analysisResultsElem.classList.remove('visible');
      setTimeout(() => {
        this.analysisResultsElem.innerHTML = '';
        this.analysisResultsElem.classList.add('hidden');
      }, 300);
      this.basicAnalysisButton.innerHTML = '<span class="button-icon">üìä</span> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏';
      this.analysisVisible = false;
    } else {
      // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      this.runBasicAnalysis();
    }
  }

  toggleAdvancedAnalysis() {
    if (this.advancedAnalysisVisible) {
      // –°–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      this.advancedAnalysisResultsElem.classList.remove('visible');
      setTimeout(() => {
        this.advancedAnalysisResultsElem.innerHTML = '';
        this.advancedAnalysisResultsElem.classList.add('hidden');
      }, 300);
      this.advancedAnalysisButton.innerHTML = '<span class="button-icon">‚ö°</span> –û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏';
      this.advancedAnalysisVisible = false;
    } else {
      // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      this.runAdvancedAnalysis();
    }
  }

  async runBasicAnalysis() {
    if (!this.basicAnalysisButton?.dataset.modelUrl) return;

    this.analysisResultsElem.classList.remove('hidden');
    this.analysisResultsElem.innerHTML = "<div class='loading'>–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏</div>";
    this.basicAnalysisButton.disabled = true;

    try {
      const modelUrl = this.basicAnalysisButton.dataset.modelUrl;
      const scene = await this.loadScene(modelUrl);
      const basicAnalysis = this.analyzeScene(scene);
      
      this.analysisResultsElem.innerHTML = basicAnalysis;
      this.analysisResultsElem.classList.add('visible');
      
      this.basicAnalysisButton.innerHTML = '<span class="button-icon">üìä</span> –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
      this.basicAnalysisButton.disabled = false;
      this.analysisVisible = true;
      
      const showAllButton = document.getElementById('showAllMeshes');
      if (showAllButton) {
        showAllButton.addEventListener('click', () => this.toggleAllMeshes());
      }
    } catch (error) {
      console.error(error);
      this.analysisResultsElem.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}</p>`;
      this.basicAnalysisButton.innerHTML = '<span class="button-icon">üìä</span> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏';
      this.basicAnalysisButton.disabled = false;
    } finally {
      this.cleanup();
    }
  }

  async runAdvancedAnalysis() {
    if (!this.advancedAnalysisButton?.dataset.modelUrl) return;

    this.advancedAnalysisResultsElem.classList.remove('hidden');
    this.advancedAnalysisResultsElem.innerHTML = "<div class='loading'>–û—Ü–µ–Ω–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏</div>";
    this.advancedAnalysisButton.disabled = true;

    try {
      const modelUrl = this.advancedAnalysisButton.dataset.modelUrl;
      const scene = await this.loadScene(modelUrl);
      const topologyAnalysis = this.analyzeTopology(scene);
      
      this.advancedAnalysisResultsElem.innerHTML = this.formatAdvancedAnalysisResults(topologyAnalysis);
      this.bindTooltipEvents();
      this.advancedAnalysisResultsElem.classList.add('visible');
      
      this.advancedAnalysisButton.innerHTML = '<span class="button-icon">‚ö°</span> –°–∫—Ä—ã—Ç—å –æ—Ü–µ–Ω–∫—É';
      this.advancedAnalysisButton.disabled = false;
      this.advancedAnalysisVisible = true;
    } catch (error) {
      console.error(error);
      this.advancedAnalysisResultsElem.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}</p>`;
      this.advancedAnalysisButton.innerHTML = '<span class="button-icon">‚ö°</span> –û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏';
      this.advancedAnalysisButton.disabled = false;
    } finally {
      this.cleanup();
    }
  }

  formatAdvancedAnalysisResults(topologyAnalysis) {
    if (!topologyAnalysis) {
      return '<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</p>';
    }

    const tooltips = {
      watertight: {
        title: '–ó–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å –º–æ–¥–µ–ª–∏',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å "–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ–π". –í –∑–∞–º–∫–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏ –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤—É–º –≥—Ä–∞–Ω—è–º. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è 3D-–ø–µ—á–∞—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.',
        recommendation: '–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–º–∫–Ω—É—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑—Ä—ã–≤—ã –≤ —Å–µ—Ç–∫–µ.'
      },
      normals: {
        title: '–ù–æ—Ä–º–∞–ª–∏',
        description: '–ù–æ—Ä–º–∞–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–Ω–∞—Ä—É–∂—É" –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –º–æ–¥–µ–ª–∏. –û–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.',
        recommendation: '–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–µ–Ω–µ–π –∏ —Ç–µ–∫—Å—Ç—É—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–µ–π.'
      },
      nonManifold: {
        title: '–ù–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã–µ —Ä—ë–±—Ä–∞',
        description: '–≠—Ç–æ —Ä—ë–±—Ä–∞, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–º—ã–∫–∞–µ—Ç –±–æ–ª—å—à–µ –¥–≤—É—Ö –≥—Ä–∞–Ω–µ–π. –í —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ —Ç–∞–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ 3D-–ø–µ—á–∞—Ç–∏.',
        recommendation: '–ù–∞–ª–∏—á–∏–µ –Ω–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã—Ö —Ä—ë–±–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –ø—Ä–∏ –ø–µ—á–∞—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ —ç—Ç–∏—Ö –º–µ—Å—Ç–∞—Ö.'
      },
      floatingVertices: {
        title: '–ü–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã',
        description: '–í–µ—Ä—à–∏–Ω—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –≥—Ä–∞–Ω—å—é. –û–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –º–æ–¥–µ–ª–∏, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –µ—ë —Ä–∞–∑–º–µ—Ä.',
        recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏.'
      },
      overSubdivided: {
        title: '–°–ª–∏—à–∫–æ–º –ø–ª–æ—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏',
        description: '–û–±–ª–∞—Å—Ç–∏ –º–æ–¥–µ–ª–∏ —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–∏–≥–æ–Ω–æ–≤. –≠—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–µ–∑ –∑–∞–º–µ—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏: —Ä–µ–±—Ä–∞, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ (L < 0.5 * L_—Å—Ä–µ–¥–Ω—è—è).',
        recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å —ç—Ç–∏ —É—á–∞—Å—Ç–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.'
      },
      underSubdivided: {
        title: '–£—á–∞—Å—Ç–∫–∏ —Å –Ω–∏–∑–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π',
        description: '–û–±–ª–∞—Å—Ç–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–∏–≥–æ–Ω–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É–≥–ª–æ–≤–∞—Ç–æ—Å—Ç–∏ –∏ –ø–æ—Ç–µ—Ä–µ –¥–µ—Ç–∞–ª–µ–π. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏: —Ä–µ–±—Ä–∞, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 200% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ (L > 2.0 * L_—Å—Ä–µ–¥–Ω—è—è).',
        recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —ç—Ç–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏.'
      }
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    const totalEdges = topologyAnalysis.totalEdges || 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–±–µ—Ä
    const overSubdividedPercent = totalEdges > 0 ? 
      (topologyAnalysis.meshDensity.overSubdivided / totalEdges * 100).toFixed(1) : 0;
    const underSubdividedPercent = totalEdges > 0 ? 
      (topologyAnalysis.meshDensity.underSubdivided / totalEdges * 100).toFixed(1) : 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ä–µ–±–µ—Ä (–Ω–µ —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Ç–Ω—ã—Ö –∏ –Ω–µ —Å –Ω–∏–∑–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π)
    const normalEdges = totalEdges - topologyAnalysis.meshDensity.overSubdivided - topologyAnalysis.meshDensity.underSubdivided;
    const normalEdgesPercent = totalEdges > 0 ? 
      (normalEdges / totalEdges * 100).toFixed(1) : 0;

    return `
      <div class="advanced-analysis">
        <h4>–û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏</h4>
        
        <div class="analysis-section">
          <h5>–¢–æ–ø–æ–ª–æ–≥–∏—è –º–æ–¥–µ–ª–∏</h5>
          <div class="analysis-item ${topologyAnalysis.isWatertight ? 'good' : 'warning'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ó–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:</span>
              <span class="info-icon" data-tooltip="watertight">i</span>
              <div class="info-tooltip" id="tooltip-watertight">
                <p><strong>${tooltips.watertight.title}</strong></p>
                <p>${tooltips.watertight.description}</p>
                <p>${tooltips.watertight.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${topologyAnalysis.isWatertight ? '–ó–∞–º–∫–Ω—É—Ç–∞' : '–ù–µ –∑–∞–º–∫–Ω—É—Ç–∞'}</span>
          </div>

          <div class="analysis-item ${topologyAnalysis.hasInvertedNormals ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ù–æ—Ä–º–∞–ª–∏:</span>
              <span class="info-icon" data-tooltip="normals">i</span>
              <div class="info-tooltip" id="tooltip-normals">
                <p><strong>${tooltips.normals.title}</strong></p>
                <p>${tooltips.normals.description}</p>
                <p>${tooltips.normals.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${topologyAnalysis.hasInvertedNormals ? '–ï—Å—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' : '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ'}</span>
          </div>

          <div class="analysis-item ${topologyAnalysis.nonManifoldEdges > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ù–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã–µ —Ä—ë–±—Ä–∞:</span>
              <span class="info-icon" data-tooltip="nonManifold">i</span>
              <div class="info-tooltip" id="tooltip-nonManifold">
                <p><strong>${tooltips.nonManifold.title}</strong></p>
                <p>${tooltips.nonManifold.description}</p>
                <p>${tooltips.nonManifold.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${topologyAnalysis.nonManifoldEdges}</span>
          </div>

          <div class="analysis-item ${topologyAnalysis.floatingVertices > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ü–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã:</span>
              <span class="info-icon" data-tooltip="floatingVertices">i</span>
              <div class="info-tooltip" id="tooltip-floatingVertices">
                <p><strong>${tooltips.floatingVertices.title}</strong></p>
                <p>${tooltips.floatingVertices.description}</p>
                <p>${tooltips.floatingVertices.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${topologyAnalysis.floatingVertices}</span>
          </div>
        </div>
        
        <div class="analysis-section">
          <h5>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏</h5>
          <div class="analysis-item ${topologyAnalysis.meshDensity.overSubdivided > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–°–ª–∏—à–∫–æ–º –ø–ª–æ—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏:</span>
              <span class="info-icon" data-tooltip="overSubdivided">i</span>
              <div class="info-tooltip" id="tooltip-overSubdivided">
                <p><strong>${tooltips.overSubdivided.title}</strong></p>
                <p>${tooltips.overSubdivided.description}</p>
                <p>${tooltips.overSubdivided.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${overSubdividedPercent}% (${topologyAnalysis.meshDensity.overSubdivided} —Ä—ë–±–µ—Ä)</span>
          </div>

          <div class="analysis-item ${topologyAnalysis.meshDensity.underSubdivided > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–£—á–∞—Å—Ç–∫–∏ —Å –Ω–∏–∑–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π:</span>
              <span class="info-icon" data-tooltip="underSubdivided">i</span>
              <div class="info-tooltip" id="tooltip-underSubdivided">
                <p><strong>${tooltips.underSubdivided.title}</strong></p>
                <p>${tooltips.underSubdivided.description}</p>
                <p>${tooltips.underSubdivided.recommendation}</p>
              </div>
            </div>
            <span class="analysis-value">${underSubdividedPercent}% (${topologyAnalysis.meshDensity.underSubdivided} —Ä—ë–±–µ—Ä)</span>
          </div>
          
          <div class="analysis-item good">
            <div class="analysis-label-group">
              <span class="analysis-label">–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å:</span>
            </div>
            <span class="analysis-value">${normalEdgesPercent}% (${normalEdges} —Ä—ë–±–µ—Ä)</span>
          </div>
          
          <div class="analysis-item">
            <div class="analysis-label-group">
              <span class="analysis-label">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä:</span>
            </div>
            <span class="analysis-value">100% (${totalEdges} —Ä—ë–±–µ—Ä)</span>
          </div>
        </div>
      </div>
    `;
  }

  bindTooltipEvents() {
    const tooltips = document.querySelectorAll('.info-tooltip');
    let activeTooltip = null;

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—É–ª—Ç–∏–ø—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.info-icon') && activeTooltip) {
        activeTooltip.classList.remove('visible');
        activeTooltip = null;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    document.querySelectorAll('.info-icon').forEach(icon => {
      icon.addEventListener('click', (e) => {
        e.stopPropagation();
        const tooltipId = `tooltip-${icon.dataset.tooltip}`;
        const tooltip = document.getElementById(tooltipId);

        if (activeTooltip && activeTooltip !== tooltip) {
          activeTooltip.classList.remove('visible');
        }

        tooltip.classList.toggle('visible');
        activeTooltip = tooltip.classList.contains('visible') ? tooltip : null;
      });
    });
  }

  analyzeTopology(scene) {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
      const topologyResults = {
        isWatertight: true,
        hasInvertedNormals: false,
        nonManifoldEdges: 0,
        floatingVertices: 0,
        totalEdges: 0,
        meshDensity: {
          overSubdivided: 0,
          underSubdivided: 0
        }
      };

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—à –≤ —Å—Ü–µ–Ω–µ
      scene.meshes.forEach(mesh => {
        if (!mesh.isEnabled()) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å (watertight)
        if (!this.isMeshWatertight(mesh)) {
          topologyResults.isWatertight = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏
        if (this.hasInvertedNormals(mesh)) {
          topologyResults.hasInvertedNormals = true;
        }

        // –ü–æ–¥—Å—á–µ—Ç –Ω–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã—Ö —Ä—ë–±–µ—Ä
        const nonManifoldEdges = this.countNonManifoldEdges(mesh);
        topologyResults.nonManifoldEdges += nonManifoldEdges;

        // –ü–æ–¥—Å—á–µ—Ç –ø–ª–∞–≤–∞—é—â–∏—Ö –≤–µ—Ä—à–∏–Ω
        const floatingVertices = this.countFloatingVertices(mesh);
        topologyResults.floatingVertices += floatingVertices;

        // –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∫–∏
        const densityAnalysis = this.analyzeMeshDensity(mesh);
        topologyResults.meshDensity.overSubdivided += densityAnalysis.overSubdivided;
        topologyResults.meshDensity.underSubdivided += densityAnalysis.underSubdivided;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        topologyResults.totalEdges += densityAnalysis.totalEdges || 0;
      });

      return topologyResults;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏:", error);
      return null;
    }
  }

  isMeshWatertight(mesh) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å (watertight)
      // –ú–µ—à —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–º–∫–Ω—É—Ç—ã–º, –µ—Å–ª–∏ –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–æ–≤–Ω–æ –¥–≤—É–º –≥—Ä–∞–Ω—è–º
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–µ—Ä—à–∏–Ω
      const indices = mesh.getIndices();
      if (!indices || indices.length === 0) return false;
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä—ë–±–µ—Ä –∏ –∏—Ö –≥—Ä–∞–Ω–µ–π
      const edgeMap = new Map();
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º
      for (let i = 0; i < indices.length; i += 3) {
        const v1 = indices[i];
        const v2 = indices[i + 1];
        const v3 = indices[i + 2];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        this.addEdgeToMap(edgeMap, v1, v2, i / 3);
        this.addEdgeToMap(edgeMap, v2, v3, i / 3);
        this.addEdgeToMap(edgeMap, v3, v1, i / 3);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–æ–≤–Ω–æ –¥–≤—É–º –≥—Ä–∞–Ω—è–º
      for (const [edge, faces] of edgeMap.entries()) {
        if (faces.length !== 2) {
          return false; // –ù–∞–π–¥–µ–Ω–æ —Ä–µ–±—Ä–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –Ω–µ –¥–≤—É–º –≥—Ä–∞–Ω—è–º
        }
      }
      
      return true; // –í—Å–µ —Ä—ë–±—Ä–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–æ–≤–Ω–æ –¥–≤—É–º –≥—Ä–∞–Ω—è–º
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç–∏ –º–µ—à–∞:", error);
      return false;
    }
  }

  addEdgeToMap(edgeMap, v1, v2, faceIndex) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã, —á—Ç–æ–±—ã —Ä–µ–±—Ä–æ (v1, v2) –∏ (v2, v1) —Å—á–∏—Ç–∞–ª–∏—Å—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
    const edgeKey = v1 < v2 ? `${v1}-${v2}` : `${v2}-${v1}`;
    
    if (!edgeMap.has(edgeKey)) {
      edgeMap.set(edgeKey, []);
    }
    
    edgeMap.get(edgeKey).push(faceIndex);
  }

  hasInvertedNormals(mesh) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏
      // –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
      
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      const indices = mesh.getIndices();
      
      if (!positions || !indices || positions.length === 0 || indices.length === 0) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
      // –ï—Å–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏
      
      let firstTriangleOrientation = null;
      
      for (let i = 0; i < Math.min(indices.length, 300); i += 3) {
        const v1 = indices[i];
        const v2 = indices[i + 1];
        const v3 = indices[i + 2];
        
        const p1 = new BABYLON.Vector3(
          positions[v1 * 3],
          positions[v1 * 3 + 1],
          positions[v1 * 3 + 2]
        );
        
        const p2 = new BABYLON.Vector3(
          positions[v2 * 3],
          positions[v2 * 3 + 1],
          positions[v2 * 3 + 2]
        );
        
        const p3 = new BABYLON.Vector3(
          positions[v3 * 3],
          positions[v3 * 3 + 1],
          positions[v3 * 3 + 2]
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const v12 = p2.subtract(p1);
        const v13 = p3.subtract(p1);
        const normal = BABYLON.Vector3.Cross(v12, v13);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
        const orientation = normal.length() > 0;
        
        if (firstTriangleOrientation === null) {
          firstTriangleOrientation = orientation;
        } else if (firstTriangleOrientation !== orientation) {
          return true; // –ù–∞–π–¥–µ–Ω–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª—å
        }
      }
      
      return false; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–µ–π:", error);
      return false;
    }
  }

  countNonManifoldEdges(mesh) {
    try {
      // –ü–æ–¥—Å—á–µ—Ç –Ω–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã—Ö —Ä—ë–±–µ—Ä
      // –ù–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω–æ–µ —Ä–µ–±—Ä–æ - —ç—Ç–æ —Ä–µ–±—Ä–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –±–æ–ª–µ–µ —á–µ–º –¥–≤—É–º –≥—Ä–∞–Ω—è–º
      
      const indices = mesh.getIndices();
      if (!indices || indices.length === 0) return 0;
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä—ë–±–µ—Ä –∏ –∏—Ö –≥—Ä–∞–Ω–µ–π
      const edgeMap = new Map();
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º
      for (let i = 0; i < indices.length; i += 3) {
        const v1 = indices[i];
        const v2 = indices[i + 1];
        const v3 = indices[i + 2];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        this.addEdgeToMap(edgeMap, v1, v2, i / 3);
        this.addEdgeToMap(edgeMap, v2, v3, i / 3);
        this.addEdgeToMap(edgeMap, v3, v1, i / 3);
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä—ë–±—Ä–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –±–æ–ª–µ–µ —á–µ–º –¥–≤—É–º –≥—Ä–∞–Ω—è–º
      let nonManifoldEdgesCount = 0;
      for (const [edge, faces] of edgeMap.entries()) {
        if (faces.length > 2) {
          nonManifoldEdgesCount++;
        }
      }
      
      return nonManifoldEdgesCount;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–µ-–º–∞–Ω–∏—Ñ–æ–ª—å–¥–Ω—ã—Ö —Ä—ë–±–µ—Ä:", error);
      return 0;
    }
  }

  countFloatingVertices(mesh) {
    try {
      // –ü–æ–¥—Å—á–µ—Ç –ø–ª–∞–≤–∞—é—â–∏—Ö –≤–µ—Ä—à–∏–Ω
      // –ü–ª–∞–≤–∞—é—â–∞—è –≤–µ—Ä—à–∏–Ω–∞ - —ç—Ç–æ –≤–µ—Ä—à–∏–Ω–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è –Ω–∏ —Å –æ–¥–Ω–æ–π –≥—Ä–∞–Ω—å—é
      
      const indices = mesh.getIndices();
      if (!indices || indices.length === 0) return 0;
      
      // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –≥—Ä–∞–Ω—è—Ö
      const usedVertices = new Set();
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º
      for (let i = 0; i < indices.length; i++) {
        usedVertices.add(indices[i]);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω
      const totalVertices = mesh.getTotalVertices();
      
      // –ü–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã - —ç—Ç–æ –≤–µ—Ä—à–∏–Ω—ã, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –≥—Ä–∞–Ω—è—Ö
      const floatingVerticesCount = totalVertices - usedVertices.size;
      
      return floatingVerticesCount;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–ª–∞–≤–∞—é—â–∏—Ö –≤–µ—Ä—à–∏–Ω:", error);
      return 0;
    }
  }

  analyzeMeshDensity(mesh) {
    try {
      // –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∫–∏
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–∫–∏ —Å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π –∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
      
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      const indices = mesh.getIndices();
      
      if (!positions || !indices || positions.length === 0 || indices.length === 0) {
        return { overSubdivided: 0, underSubdivided: 0, totalEdges: 0 };
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä
      let totalEdgeLength = 0;
      let edgeCount = 0;
      
      for (let i = 0; i < indices.length; i += 3) {
        const v1 = indices[i];
        const v2 = indices[i + 1];
        const v3 = indices[i + 2];
        
        const p1 = new BABYLON.Vector3(
          positions[v1 * 3],
          positions[v1 * 3 + 1],
          positions[v1 * 3 + 2]
        );
        
        const p2 = new BABYLON.Vector3(
          positions[v2 * 3],
          positions[v2 * 3 + 1],
          positions[v2 * 3 + 2]
        );
        
        const p3 = new BABYLON.Vector3(
          positions[v3 * 3],
          positions[v3 * 3 + 1],
          positions[v3 * 3 + 2]
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const edge1Length = BABYLON.Vector3.Distance(p1, p2);
        const edge2Length = BABYLON.Vector3.Distance(p2, p3);
        const edge3Length = BABYLON.Vector3.Distance(p3, p1);
        
        totalEdgeLength += edge1Length + edge2Length + edge3Length;
        edgeCount += 3;
      }
      
      const avgEdgeLength = totalEdgeLength / edgeCount;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π –∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
      const overSubdividedThreshold = avgEdgeLength * 0.5; // –†—ë–±—Ä–∞ –≤ 2 —Ä–∞–∑–∞ –∫–æ—Ä–æ—á–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
      const underSubdividedThreshold = avgEdgeLength * 2.0; // –†—ë–±—Ä–∞ –≤ 2 —Ä–∞–∑–∞ –¥–ª–∏–Ω–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä —Å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π –∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
      let overSubdividedCount = 0;
      let underSubdividedCount = 0;
      
      for (let i = 0; i < indices.length; i += 3) {
        const v1 = indices[i];
        const v2 = indices[i + 1];
        const v3 = indices[i + 2];
        
        const p1 = new BABYLON.Vector3(
          positions[v1 * 3],
          positions[v1 * 3 + 1],
          positions[v1 * 3 + 2]
        );
        
        const p2 = new BABYLON.Vector3(
          positions[v2 * 3],
          positions[v2 * 3 + 1],
          positions[v2 * 3 + 2]
        );
        
        const p3 = new BABYLON.Vector3(
          positions[v3 * 3],
          positions[v3 * 3 + 1],
          positions[v3 * 3 + 2]
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const edge1Length = BABYLON.Vector3.Distance(p1, p2);
        const edge2Length = BABYLON.Vector3.Distance(p2, p3);
        const edge3Length = BABYLON.Vector3.Distance(p3, p1);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ
        if (edge1Length < overSubdividedThreshold) overSubdividedCount++;
        if (edge2Length < overSubdividedThreshold) overSubdividedCount++;
        if (edge3Length < overSubdividedThreshold) overSubdividedCount++;
        
        if (edge1Length > underSubdividedThreshold) underSubdividedCount++;
        if (edge2Length > underSubdividedThreshold) underSubdividedCount++;
        if (edge3Length > underSubdividedThreshold) underSubdividedCount++;
      }
      
      return {
        overSubdivided: overSubdividedCount,
        underSubdivided: underSubdividedCount,
        totalEdges: edgeCount
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∫–∏:", error);
      return { overSubdivided: 0, underSubdivided: 0, totalEdges: 0 };
    }
  }

  toggleAllMeshes() {
    this.showAllMeshes = !this.showAllMeshes;
    const showAllButton = document.getElementById('showAllMeshes');
    const meshItems = document.querySelectorAll('.mesh-analysis');
    const hiddenMeshes = document.querySelectorAll('.mesh-analysis.hidden');
    
    if (this.showAllMeshes) {
      // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—à–∏
      hiddenMeshes.forEach(mesh => {
        mesh.classList.remove('hidden');
      });
      showAllButton.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ –º–µ—à–µ–π';
    } else {
      // –°–∫—Ä—ã—Ç—å –ª–∏—à–Ω–∏–µ –º–µ—à–∏
      meshItems.forEach((mesh, index) => {
        if (index >= 5) {
          mesh.classList.add('hidden');
        }
      });
      showAllButton.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—à–∏';
    }
  }

  loadScene(url) {
    return new Promise((resolve, reject) => {
      this.cleanup();

      const canvas = document.createElement('canvas');
      canvas.id = "tempCanvas";
      canvas.style.display = 'none';
      document.body.appendChild(canvas);

      this.currentEngine = new BABYLON.Engine(canvas, true, {
        disableWebGL2Support: false,
        preserveDrawingBuffer: true
      }, false);

      BABYLON.SceneLoader.Load("", url, this.currentEngine, scene => {
        scene.executeWhenReady(() => {
          if (!scene.activeCamera) {
            new BABYLON.ArcRotateCamera("cam",
              Math.PI/2, Math.PI/4, 10,
              BABYLON.Vector3.Zero(), scene
            );
          }
          resolve(scene);
        });
      }, null, reject);
    });
  }

  analyzeScene(scene) {
    try {
      let totalMeshes = 0;
      let totalVertices = 0;
      let totalIndices = 0;
      let totalTriangles = 0;
      let totalVolume = 0;
      let totalArea = 0;
      let analysisDetails = '';

      scene.meshes.forEach(mesh => {
        if (!mesh.isEnabled()) return;

        const vertices = mesh.getTotalVertices?.() || 0;
        const indices = mesh.getIndices?.() || [];
        const triangles = indices.length / 3;
        
        // –í—ã—á–∏—Å–ª—è–µ–º bounding box –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const boundingInfo = mesh.getBoundingInfo();
        const boundingBox = boundingInfo.boundingBox;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º bounding box
        mesh.computeWorldMatrix(true);
        boundingBox.minimumWorld = boundingBox.minimum;
        boundingBox.maximumWorld = boundingBox.maximum;
        
        const min = boundingBox.minimumWorld;
        const max = boundingBox.maximumWorld;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log(`Mesh: ${mesh.name}`);
        console.log('Min:', min);
        console.log('Max:', max);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º bounding box
        const volume = Math.abs((max.x - min.x) * (max.y - min.y) * (max.z - min.z));
        console.log('Volume:', volume);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ bounding box
        const area = 2 * (
          Math.abs((max.x - min.x) * (max.y - min.y)) + // XY –ø–ª–æ—Å–∫–æ—Å—Ç–∏
          Math.abs((max.y - min.y) * (max.z - min.z)) + // YZ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
          Math.abs((max.x - min.x) * (max.z - min.z))   // XZ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        );
        
        totalMeshes++;
        totalVertices += vertices;
        totalIndices += indices.length;
        totalTriangles += triangles;
        totalVolume += volume;
        totalArea += area;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hidden –¥–ª—è –º–µ—à–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 5
        const hiddenClass = totalMeshes > 5 ? ' hidden' : '';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NaN –∏ Infinity
        const formatValue = (value, unit = '') => {
          if (isNaN(value) || !isFinite(value)) {
            return '<span class="error-value">–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</span>';
          }
          if (value === 0 || value < 0.000001) {
            return `<span class="warning-value">0.00${unit}</span>`;
          }
          return `${value.toFixed(2)}${unit}`;
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—à –ø–ª–æ—Å–∫–∏–º –∏–ª–∏ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é —Ç–æ–ª—â–∏–Ω—É
        const isFlatMesh = (max.x - min.x) < 0.001 || (max.y - min.y) < 0.001 || (max.z - min.z) < 0.001;
        const hasZeroVolume = volume < 0.000001;
        const volumeClass = (isFlatMesh || hasZeroVolume) ? 'warning-value' : '';
        const volumeNote = isFlatMesh ? 
          '<span class="stat-note">(–ø–ª–æ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç)</span>' : 
          (hasZeroVolume ? '<span class="stat-note">(–Ω—É–ª–µ–≤–æ–π –æ–±—ä–µ–º)</span>' : '');
        
        analysisDetails += `
          <div class="mesh-analysis${hiddenClass}">
            <div class="mesh-header">
              <strong>${mesh.name}</strong>
              <span class="mesh-stats-summary">
                ${vertices.toLocaleString()} –≤–µ—Ä—à–∏–Ω | ${triangles.toLocaleString()} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
              </span>
            </div>
            <div class="mesh-stats">
              <div class="stat-row">
                <span class="stat-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä—à–∏–Ω:</span>
                <span class="stat-value">${formatValue(vertices / area, ' –≤–µ—Ä—à–∏–Ω/–º¬≤')}</span>
              </div>
              <div class="stat-row">
                <span class="stat-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:</span>
                <span class="stat-value">${formatValue(triangles / area, ' —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤/–º¬≤')}</span>
              </div>
              <div class="stat-row">
                <span class="stat-label">–û–±—ä—ë–º:</span>
                <span class="stat-value ${volumeClass}">${formatValue(volume / 1000000, ' –º¬≥')}</span>
                ${volumeNote}
              </div>
            </div>
          </div>`;
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const avgVerticesPerMesh = totalMeshes > 0 ? totalVertices / totalMeshes : 0;
      const avgTrianglesPerMesh = totalMeshes > 0 ? totalTriangles / totalMeshes : 0;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–æ—â–∞–¥—å –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞
      const avgVerticesDensity = totalArea > 0 ? totalVertices / totalArea : 0;
      const avgTrianglesDensity = totalArea > 0 ? totalTriangles / totalArea : 0;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—à–∏" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—à–µ–π –±–æ–ª—å—à–µ 5
      const showAllButton = totalMeshes > 5 ? 
        `<button id="showAllMeshes" class="show-all-button">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—à–∏</button>` : '';

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–∞
      const volumeNote = `
        <div class="analysis-note">
          <p><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –û–±—ä–µ–º –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –æ–±—ä–µ–º–æ–≤ bounding box –∫–∞–∂–¥–æ–≥–æ –º–µ—à–∞. 
          –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ—à–µ–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—É—Å—Ç–æ—Ç—ã. 
          –î–ª—è –ø–ª–æ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (2D) –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ–±—ä–µ–º–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏–Ω–∏–∏ –∏–ª–∏ —Ç–æ—á–∫–∏) –æ–±—ä–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ –Ω—É–ª—é.</p>
        </div>
      `;

      return `
        <div class="analysis-summary">
          <div class="summary-item">
            <div class="summary-icon">üì¶</div>
            <span class="summary-label">–í—Å–µ–≥–æ –º–µ—à–µ–π:</span>
            <span class="summary-value">${totalMeshes.toLocaleString()}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">‚ö™</div>
            <span class="summary-label">–í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω:</span>
            <span class="summary-value">${totalVertices.toLocaleString()}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üî¢</div>
            <span class="summary-label">–í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤:</span>
            <span class="summary-value">${totalIndices.toLocaleString()}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üî∫</div>
            <span class="summary-label">–í—Å–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:</span>
            <span class="summary-value">${totalTriangles.toLocaleString()}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üìä</div>
            <span class="summary-label">–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω –Ω–∞ –º–µ—à:</span>
            <span class="summary-value">${avgVerticesPerMesh.toFixed(2)}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üìà</div>
            <span class="summary-label">–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–∞ –º–µ—à:</span>
            <span class="summary-value">${avgTrianglesPerMesh.toFixed(2)}</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üéØ</div>
            <span class="summary-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä—à–∏–Ω –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø–ª–æ—â–∞–¥–∏:</span>
            <span class="summary-value">${(avgVerticesDensity * 1000).toFixed(2)} –≤–µ—Ä—à–∏–Ω/–º¬≤</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üé≤</div>
            <span class="summary-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø–ª–æ—â–∞–¥–∏:</span>
            <span class="summary-value">${(avgTrianglesDensity * 1000).toFixed(2)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤/–º¬≤</span>
          </div>
          <div class="summary-item">
            <div class="summary-icon">üì¶</div>
            <span class="summary-label">–û–±—ä—ë–º –º–æ–¥–µ–ª–∏:</span>
            <span class="summary-value">${(totalVolume / 1000000).toFixed(2)} –º¬≥</span>
          </div>
        </div>
        <div class="analysis-details">
          <h4>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—à–µ–π</h4>
          ${analysisDetails}
          ${showAllButton}
        </div>
        <div class="analysis-footer">
          ${volumeNote}
        </div>`;
    } catch(e) {
      console.error(e);
      return `<p class="error">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${e.message}</p>`;
    }
  }
} 