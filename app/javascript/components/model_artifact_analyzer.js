export class ModelArtifactAnalyzer {
  constructor() {
    this.isInitialized = false;
    this.currentEngine = null;
    this.analysisVisible = false;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.EPSILON = 1e-6; // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    this.ZERO_AREA_THRESHOLD = 1e-6; // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–ª–µ–≤–æ–π –ø–ª–æ—â–∞–¥–∏
    this.DUPLICATE_DISTANCE_THRESHOLD = 1e-4; // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–µ—Ä—à–∏–Ω
    this.SELF_INTERSECTION_DEPTH = 3; // –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    
    this.initializeElements();
    this.bindEvents();
  }

  initializeElements() {
    this.artifactAnalysisButton = document.getElementById('runArtifactAnalysis');
    this.artifactAnalysisResults = document.getElementById('artifactAnalysisResults');
  }

  bindEvents() {
    this.artifactAnalysisButton?.addEventListener('click', () => this.toggleArtifactAnalysis());
    document.addEventListener('turbo:before-cache', () => this.cleanup());
  }

  cleanup() {
    if (this.currentEngine) {
      this.currentEngine.dispose();
      this.currentEngine = null;
    }
    const canvas = document.getElementById("tempCanvas");
    if (canvas) canvas.remove();
  }

  toggleArtifactAnalysis() {
    if (this.analysisVisible) {
      this.artifactAnalysisResults.classList.remove('visible');
      setTimeout(() => {
        this.artifactAnalysisResults.innerHTML = '';
        this.artifactAnalysisResults.classList.add('hidden');
      }, 300);
      this.artifactAnalysisButton.innerHTML = '<span class="button-icon">üîç</span> –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤';
      this.analysisVisible = false;
    } else {
      this.runArtifactAnalysis();
    }
  }

  async runArtifactAnalysis() {
    if (!this.artifactAnalysisButton?.dataset.modelUrl) return;

    this.artifactAnalysisResults.classList.remove('hidden');
    this.artifactAnalysisResults.innerHTML = "<div class='loading'>–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏...</div>";
    this.artifactAnalysisButton.disabled = true;

    try {
      const modelUrl = this.artifactAnalysisButton.dataset.modelUrl;
      const scene = await this.loadScene(modelUrl);
      const artifactAnalysis = this.analyzeArtifacts(scene);
      
      this.artifactAnalysisResults.innerHTML = this.formatArtifactAnalysisResults(artifactAnalysis);
      this.bindTooltipEvents();
      this.artifactAnalysisResults.classList.add('visible');
      
      this.artifactAnalysisButton.innerHTML = '<span class="button-icon">üîç</span> –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã';
      this.artifactAnalysisButton.disabled = false;
      this.analysisVisible = true;
    } catch (error) {
      console.error(error);
      this.artifactAnalysisResults.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}</p>`;
      this.artifactAnalysisButton.innerHTML = '<span class="button-icon">üîç</span> –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤';
      this.artifactAnalysisButton.disabled = false;
    } finally {
      this.cleanup();
    }
  }

  analyzeArtifacts(scene) {
    const results = {
      floatingVertices: 0,
      duplicateVertices: 0,
      duplicateFaces: 0,
      flippedFaces: 0,
      zeroAreaFaces: 0,
      selfIntersectingFaces: 0
    };

    scene.meshes.forEach(mesh => {
      if (!mesh.isEnabled()) return;

      // –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–≤–∞—é—â–∏—Ö –≤–µ—Ä—à–∏–Ω
      results.floatingVertices += this.findFloatingVertices(mesh);

      // –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–µ—Ä—à–∏–Ω
      results.duplicateVertices += this.findDuplicateVertices(mesh);

      // –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
      results.duplicateFaces += this.findDuplicateFaces(mesh);

      // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∫—Ä—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
      results.flippedFaces += this.findFlippedFaces(mesh);

      // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –ø–ª–æ—â–∞–¥—å—é
      results.zeroAreaFaces += this.findZeroAreaFaces(mesh);

      // –ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
      results.selfIntersectingFaces += this.findSelfIntersectingFaces(mesh);
    });

    return results;
  }

  findFloatingVertices(mesh) {
    try {
      const indices = mesh.getIndices();
      if (!indices) {
        return 0;
      }

      const usedVertices = new Set();
      for (let i = 0; i < indices.length; i++) {
        usedVertices.add(indices[i]);
      }

      const totalVertices = mesh.getTotalVertices();
      if (totalVertices === undefined) {
        return 0;
      }

      return Math.max(0, totalVertices - usedVertices.size);
    } catch (error) {
      return 0;
    }
  }

  findDuplicateVertices(mesh) {
    try {
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      if (!positions) {
        return 0;
      }

      const vertexMap = new Map();
      let duplicates = 0;

      for (let i = 0; i < positions.length; i += 3) {
        const x = positions[i];
        const y = positions[i + 1];
        const z = positions[i + 2];

        const key = `${x.toFixed(3)},${y.toFixed(3)},${z.toFixed(3)}`;
        if (vertexMap.has(key)) {
          duplicates++;
        } else {
          vertexMap.set(key, true);
        }
      }

      return duplicates;
    } catch (error) {
      return 0;
    }
  }

  findDuplicateFaces(mesh) {
    try {
      const indices = mesh.getIndices();
      if (!indices) {
        return 0;
      }

      const faceMap = new Map();
      let duplicates = 0;

      for (let i = 0; i < indices.length; i += 3) {
        if (i + 2 >= indices.length) break;

        const face = [indices[i], indices[i + 1], indices[i + 2]].sort((a, b) => a - b);
        const key = face.join(',');
        
        if (faceMap.has(key)) {
          duplicates++;
        } else {
          faceMap.set(key, true);
        }
      }

      return duplicates;
    } catch (error) {
      return 0;
    }
  }

  findFlippedFaces(mesh) {
    try {
      const indices = mesh.getIndices();
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      
      if (!indices || !positions) {
        return 0;
      }

      let flipped = 0;
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ—à–∞
      const worldMatrix = mesh.getWorldMatrix();
      
      // –°–æ–∑–¥–∞–µ–º Three.js –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
      const geometry = new THREE.BufferGeometry();
      const vertices = new Float32Array(positions);
      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
      geometry.setIndex(indices);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
      geometry.computeVertexNormals();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä –º–µ—à–∞ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
      const boundingInfo = mesh.getBoundingInfo();
      const center = boundingInfo.boundingBox.centerWorld;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä–∞–Ω—å
      for (let i = 0; i < indices.length; i += 3) {
        if (i + 2 >= indices.length) break;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const v1 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[indices[i] * 3],
            positions[indices[i] * 3 + 1],
            positions[indices[i] * 3 + 2]
          ),
          worldMatrix
        );
        
        const v2 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[indices[i + 1] * 3],
            positions[indices[i + 1] * 3 + 1],
            positions[indices[i + 1] * 3 + 2]
          ),
          worldMatrix
        );
        
        const v3 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[indices[i + 2] * 3],
            positions[indices[i + 2] * 3 + 1],
            positions[indices[i + 2] * 3 + 2]
          ),
          worldMatrix
        );
        
        // –°–æ–∑–¥–∞–µ–º Three.js —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const triangle = new THREE.Triangle(
          new THREE.Vector3(v1.x, v1.y, v1.z),
          new THREE.Vector3(v2.x, v2.y, v2.z),
          new THREE.Vector3(v3.x, v3.y, v3.z)
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å –∏ —Ü–µ–Ω—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const normal = new THREE.Vector3();
        triangle.getNormal(normal);
        
        const centroid = new THREE.Vector3();
        triangle.getMidpoint(centroid);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –º–µ—à–∞
        const toCenter = new THREE.Vector3(
          center.x - centroid.x,
          center.y - centroid.y,
          center.z - centroid.z
        );
        
        if (normal.dot(toCenter) < 0) {
          flipped++;
        }
      }
      
      return flipped;
    } catch (error) {
      return 0;
    }
  }

  findZeroAreaFaces(mesh) {
    try {
      const indices = mesh.getIndices();
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      
      if (!indices || !positions) {
        return 0;
      }

      let zeroArea = 0;

      for (let i = 0; i < indices.length; i += 3) {
        if (i + 2 >= indices.length) break;

        const v1 = new BABYLON.Vector3(
          positions[indices[i] * 3],
          positions[indices[i] * 3 + 1],
          positions[indices[i] * 3 + 2]
        );
        const v2 = new BABYLON.Vector3(
          positions[indices[i + 1] * 3],
          positions[indices[i + 1] * 3 + 1],
          positions[indices[i + 1] * 3 + 2]
        );
        const v3 = new BABYLON.Vector3(
          positions[indices[i + 2] * 3],
          positions[indices[i + 2] * 3 + 1],
          positions[indices[i + 2] * 3 + 2]
        );

        const area = BABYLON.Vector3.Cross(
          v2.subtract(v1),
          v3.subtract(v1)
        ).length() / 2;

        if (area < this.ZERO_AREA_THRESHOLD) {
          zeroArea++;
        }
      }

      return zeroArea;
    } catch (error) {
      return 0;
    }
  }

  findSelfIntersectingFaces(mesh) {
    try {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –º–µ—à
      if (mesh.name === '__root__') {
        return 0;
      }
      
      const indices = mesh.getIndices();
      const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
      
      if (!indices || !positions || indices.length === 0 || positions.length === 0 || indices.length % 3 !== 0) {
        return 0;
      }

      let selfIntersecting = 0;
      const triangles = [];
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ—à–∞
      const worldMatrix = mesh.getWorldMatrix();
      if (!worldMatrix) {
        return 0;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
      for (let i = 0; i < indices.length; i += 3) {
        if (i + 2 >= indices.length) break;
        
        const idx1 = indices[i];
        const idx2 = indices[i + 1];
        const idx3 = indices[i + 2];
        
        if (idx1 * 3 + 2 >= positions.length || 
            idx2 * 3 + 2 >= positions.length || 
            idx3 * 3 + 2 >= positions.length) {
          continue;
        }
        
        const v1 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[idx1 * 3],
            positions[idx1 * 3 + 1],
            positions[idx1 * 3 + 2]
          ),
          worldMatrix
        );
        
        const v2 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[idx2 * 3],
            positions[idx2 * 3 + 1],
            positions[idx2 * 3 + 2]
          ),
          worldMatrix
        );
        
        const v3 = BABYLON.Vector3.TransformCoordinates(
          new BABYLON.Vector3(
            positions[idx3 * 3],
            positions[idx3 * 3 + 1],
            positions[idx3 * 3 + 2]
          ),
          worldMatrix
        );
        
        const triangle = new THREE.Triangle(
          new THREE.Vector3(v1.x, v1.y, v1.z),
          new THREE.Vector3(v2.x, v2.y, v2.z),
          new THREE.Vector3(v3.x, v3.y, v3.z)
        );
        
        triangles.push(triangle);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏
      for (let i = 0; i < triangles.length; i++) {
        const triangle1 = triangles[i];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        for (let j = Math.max(0, i - 10); j < Math.min(triangles.length, i + 10); j++) {
          if (i === j) continue;
          
          const triangle2 = triangles[j];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
          if (this.checkTriangleIntersection(triangle1, triangle2)) {
            selfIntersecting++;
            break;
          }
        }
      }
      
      return selfIntersecting;
    } catch (error) {
      return 0;
    }
  }

  checkTriangleIntersection(triangle1, triangle2) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ä–µ–±–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ –≤—Ç–æ—Ä—ã–º
    const edges1 = [
      [triangle1.a, triangle1.b],
      [triangle1.b, triangle1.c],
      [triangle1.c, triangle1.a]
    ];
    
    const edges2 = [
      [triangle2.a, triangle2.b],
      [triangle2.b, triangle2.c],
      [triangle2.c, triangle2.a]
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä —Ä–µ–±–µ—Ä
    for (const edge1 of edges1) {
      for (const edge2 of edges2) {
        if (this.checkEdgeIntersection(edge1[0], edge1[1], edge2[0], edge2[1])) {
          return true;
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–µ—Ä—à–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ
    if (this.isPointInTriangle(triangle2.a, triangle1) ||
        this.isPointInTriangle(triangle2.b, triangle1) ||
        this.isPointInTriangle(triangle2.c, triangle1) ||
        this.isPointInTriangle(triangle1.a, triangle2) ||
        this.isPointInTriangle(triangle1.b, triangle2) ||
        this.isPointInTriangle(triangle1.c, triangle2)) {
      return true;
    }
    
    return false;
  }

  checkEdgeIntersection(p1, p2, p3, p4) {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã
    const v1 = new THREE.Vector3().subVectors(p2, p1);
    const v2 = new THREE.Vector3().subVectors(p4, p3);
    const v3 = new THREE.Vector3().subVectors(p3, p1);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    const cross1 = new THREE.Vector3().crossVectors(v1, v2);
    const cross2 = new THREE.Vector3().crossVectors(v3, v2);
    
    // –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä—ã –∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω—ã
    if (cross1.length() < this.EPSILON) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∞—Ç –ª–∏ —Ç–æ—á–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π
      const cross3 = new THREE.Vector3().crossVectors(v3, v1);
      if (cross3.length() < this.EPSILON) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –æ—Ç—Ä–µ–∑–∫–æ–≤
        const t1 = v3.dot(v1) / v1.lengthSq();
        const t2 = (v3.dot(v1) + v2.dot(v1)) / v1.lengthSq();
        return (t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1) || (t1 <= 0 && t2 >= 1);
      }
      return false;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const t = cross2.dot(cross1) / cross1.lengthSq();
    const u = cross2.length() / cross1.length();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–∞ –æ–±–æ–∏—Ö –æ—Ç—Ä–µ–∑–∫–∞—Ö
    return t >= 0 && t <= 1 && u >= 0 && u <= 1;
  }

  isPointInTriangle(point, triangle) {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã
    const v0 = new THREE.Vector3().subVectors(triangle.c, triangle.a);
    const v1 = new THREE.Vector3().subVectors(triangle.b, triangle.a);
    const v2 = new THREE.Vector3().subVectors(point, triangle.a);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∞–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const dot00 = v0.dot(v0);
    const dot01 = v0.dot(v1);
    const dot02 = v0.dot(v2);
    const dot11 = v1.dot(v1);
    const dot12 = v1.dot(v2);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –±–∞—Ä–∏—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    return (u >= 0) && (v >= 0) && (u + v <= 1);
  }

  formatArtifactAnalysisResults(results) {
    return `
      <div class="artifact-analysis">
        <h4>–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏</h4>
        
        <div class="analysis-section">
          <div class="analysis-item ${results.floatingVertices > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ü–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã:</span>
              <span class="info-icon" data-tooltip="floatingVertices">i</span>
              <div class="info-tooltip" id="tooltip-floatingVertices">
                <p><strong>–ü–ª–∞–≤–∞—é—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã</strong></p>
                <p>–í–µ—Ä—à–∏–Ω—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–æ–ª–∏–≥–æ–Ω–æ–º. –ú–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—Ä—à–∏–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–µ—Ä—à–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø–æ–ª–∏–≥–æ–Ω–∞—Ö.</p>
              </div>
            </div>
            <span class="analysis-value">${results.floatingVertices}</span>
          </div>

          <div class="analysis-item ${results.duplicateVertices > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–µ—Ä—à–∏–Ω—ã:</span>
              <span class="info-icon" data-tooltip="duplicateVertices">i</span>
              <div class="info-tooltip" id="tooltip-duplicateVertices">
                <p><strong>–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–µ—Ä—à–∏–Ω—ã</strong></p>
                <p>–í–µ—Ä—à–∏–Ω—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ú–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ—Ä—à–∏–Ω. –ú–æ–∂–µ—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ—Ä—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏, –Ω–æ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã.</p>
              </div>
            </div>
            <span class="analysis-value">${results.duplicateVertices}</span>
          </div>

          <div class="analysis-item ${results.duplicateFaces > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª–∏–≥–æ–Ω—ã:</span>
              <span class="info-icon" data-tooltip="duplicateFaces">i</span>
              <div class="info-tooltip" id="tooltip-duplicateFaces">
                <p><strong>–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª–∏–≥–æ–Ω—ã</strong></p>
                <p>–ü–æ–ª–∏–≥–æ–Ω—ã, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –ø–æ –≤–µ—Ä—à–∏–Ω–∞–º. –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤ –≤–µ—Ä—à–∏–Ω –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤–µ—Ä—à–∏–Ω.</p>
              </div>
            </div>
            <span class="analysis-value">${results.duplicateFaces}</span>
          </div>

          <div class="analysis-item ${results.flippedFaces > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ü–µ—Ä–µ–∫—Ä—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã:</span>
              <span class="info-icon" data-tooltip="flippedFaces">i</span>
              <div class="info-tooltip" id="tooltip-flippedFaces">
                <p><strong>–ü–µ—Ä–µ–∫—Ä—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã</strong></p>
                <p>–ü–æ–ª–∏–≥–æ–Ω—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–æ—Ä–º–∞–ª–µ–π. –ú–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏ –ø–æ–ª–∏–≥–æ–Ω–∞. –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ—à–∞ –∏ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–ª–æ–∂–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏.</p>
              </div>
            </div>
            <span class="analysis-value">${results.flippedFaces}</span>
          </div>

          <div class="analysis-item ${results.zeroAreaFaces > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–ü–æ–ª–∏–≥–æ–Ω—ã —Å –Ω—É–ª–µ–≤–æ–π –ø–ª–æ—â–∞–¥—å—é:</span>
              <span class="info-icon" data-tooltip="zeroAreaFaces">i</span>
              <div class="info-tooltip" id="tooltip-zeroAreaFaces">
                <p><strong>–ü–æ–ª–∏–≥–æ–Ω—ã —Å –Ω—É–ª–µ–≤–æ–π –ø–ª–æ—â–∞–¥—å—é</strong></p>
                <p>–ü–æ–ª–∏–≥–æ–Ω—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã –ª–µ–∂–∞—Ç –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ù–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–æ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä–æ–≥ 0.000001 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–ª–µ–≤–æ–π –ø–ª–æ—â–∞–¥–∏.</p>
              </div>
            </div>
            <span class="analysis-value">${results.zeroAreaFaces}</span>
          </div>

          <div class="analysis-item ${results.selfIntersectingFaces > 0 ? 'warning' : 'good'}">
            <div class="analysis-label-group">
              <span class="analysis-label">–°–∞–º–æ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ–ª–∏–≥–æ–Ω—ã:</span>
              <span class="info-icon" data-tooltip="selfIntersectingFaces">i</span>
              <div class="info-tooltip" id="tooltip-selfIntersectingFaces">
                <p><strong>–°–∞–º–æ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ–ª–∏–≥–æ–Ω—ã</strong></p>
                <p>–ü–æ–ª–∏–≥–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º. –ú–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –∏ 3D-–ø–µ—á–∞—Ç–∏.</p>
                <p class="info-note">–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π.</p>
              </div>
            </div>
            <span class="analysis-value">${results.selfIntersectingFaces}</span>
          </div>
        </div>
      </div>
    `;
  }

  loadScene(url) {
    return new Promise((resolve, reject) => {
      this.cleanup();

      const canvas = document.createElement('canvas');
      canvas.id = "tempCanvas";
      canvas.style.display = 'none';
      document.body.appendChild(canvas);

      this.currentEngine = new BABYLON.Engine(canvas, true, {
        disableWebGL2Support: false,
        preserveDrawingBuffer: true
      }, false);

      BABYLON.SceneLoader.Load("", url, this.currentEngine, scene => {
        scene.executeWhenReady(() => {
          if (!scene.activeCamera) {
            new BABYLON.ArcRotateCamera("cam",
              Math.PI/2, Math.PI/4, 10,
              BABYLON.Vector3.Zero(), scene
            );
          }
          resolve(scene);
        });
      }, null, reject);
    });
  }

  bindTooltipEvents() {
    const tooltips = document.querySelectorAll('.info-tooltip');
    let activeTooltip = null;

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—É–ª—Ç–∏–ø—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.info-icon') && activeTooltip) {
        activeTooltip.classList.remove('visible');
        activeTooltip = null;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    document.querySelectorAll('.info-icon').forEach(icon => {
      icon.addEventListener('click', (e) => {
        e.stopPropagation();
        const tooltipId = `tooltip-${icon.dataset.tooltip}`;
        const tooltip = document.getElementById(tooltipId);

        if (activeTooltip && activeTooltip !== tooltip) {
          activeTooltip.classList.remove('visible');
        }

        tooltip.classList.toggle('visible');
        activeTooltip = tooltip.classList.contains('visible') ? tooltip : null;
      });
    });
  }
} 